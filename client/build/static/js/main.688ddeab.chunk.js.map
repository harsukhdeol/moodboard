{"version":3,"sources":["actions/errorActions.js","actions/types.js","actions/authActions.js","components/auth/RegisterModal.js","components/auth/LoginModal.js","components/auth/Logout.js","components/AppNavBar.js","actions/itemActions.js","components/List.js","components/ItemModal.js","reducers/itemReducer.js","reducers/errorReducer.js","reducers/authReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["returnErrors","msg","status","id","type","payload","clearErrors","tokenConfig","getState","token","auth","config","headers","RegisterModal","state","modal","name","email","password","toggle","props","setState","onChange","e","target","value","onSubmit","preventDefault","newUser","register","prevProps","this","error","isAuthenticated","NavLink","onClick","href","Modal","isOpen","ModalHeader","ModalBody","Alert","color","Form","FormGroup","Label","for","Input","placeholder","className","Button","block","Component","connect","dispatch","body","JSON","stringify","axios","post","then","res","data","catch","err","response","LoginModal","user","login","Logout","logout","AppNavbar","authLinks","NavItem","guestLinks","Navbar","dark","expand","Container","NavbarBrand","NavbarToggler","Collapse","navbar","Nav","setItemsLoading","List","onDeleteClick","deleteItem","timer","setInterval","displayItems","clearInterval","_id","getItems","items","item","CardColumns","TransitionGroup","map","title","imgURL","CSSTransition","key","timeout","classNames","Card","CardImg","top","width","src","alt","CardBody","CardTitle","CardText","size","bind","userID","get","delete","ItemModal","console","log","newItem","addItem","initialState","loading","localStorage","getItem","isLoading","combineReducers","action","filter","setItem","removeItem","middleware","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","App","AppNavBar","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.688ddeab.chunk.js","sourcesContent":["import { GET_ERRORS, CLEAR_ERRORS } from \"./types\";\r\n\r\n//RETURN ERRORS\r\n\r\nexport const returnErrors = (msg, status, id = null) => {\r\n  return {\r\n    type: GET_ERRORS,\r\n    payload: {\r\n      msg,\r\n      status,\r\n      id,\r\n    },\r\n  };\r\n};\r\n//CLEAR ERRS\r\nexport const clearErrors = () => {\r\n  return {\r\n    type: CLEAR_ERRORS,\r\n  };\r\n};\r\n","//constant variables that are exported\r\n\r\nexport const GET_ITEMS = \"GET_ITEMS\";\r\nexport const ADD_ITEM = \"ADD_ITEM\";\r\nexport const DELETE_ITEM = \"DELETE_ITEM\";\r\nexport const ITEMS_LOADING = \"ITEMS_LOADING\";\r\n\r\nexport const USER_LOADING = \"USER_LOADING\";\r\nexport const USER_LOADED = \"USER_LOADED\";\r\nexport const AUTH_ERROR = \"AUTH_ERROR\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const GET_ERRORS = \"GET_ERRORS\";\r\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\r\n","import axios from \"axios\";\r\nimport { returnErrors } from \"./errorActions\";\r\n\r\nimport {\r\n  USER_LOADED,\r\n  USER_LOADING,\r\n  AUTH_ERROR,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  REGISTER_FAIL,\r\n  REGISTER_SUCCESS,\r\n  LOGOUT_SUCCESS,\r\n} from \"./types\";\r\n\r\n//check token and load user\r\n\r\nexport const loadUser = () => (dispatch, getState) => {\r\n  //user loading\r\n\r\n  dispatch({ type: USER_LOADING });\r\n\r\n  axios\r\n    .get(\"/api/auth/user\", tokenConfig(getState))\r\n    .then((res) =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: AUTH_ERROR,\r\n      });\r\n    });\r\n};\r\n//Setup config/headers and token\r\nexport const tokenConfig = (getState) => {\r\n  //get token form local storage\r\n  const token = getState().auth.token;\r\n\r\n  //headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  //if token, add to headers\r\n  if (token) {\r\n    config.headers[\"x-auth-token\"] = token;\r\n  }\r\n  return config;\r\n};\r\n\r\n//register user\r\nexport const register = ({ name, email, password }) => (dispatch) => {\r\n  //create headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  //convert js input to json to send to api\r\n  const body = JSON.stringify({ name, email, password });\r\n\r\n  axios\r\n    .post(\"/api/users\", body, config)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\r\n      );\r\n\r\n      dispatch({\r\n        type: REGISTER_FAIL,\r\n      });\r\n    });\r\n};\r\n\r\n//login user\r\nexport const login = ({ email, password }) => (dispatch) => {\r\n  //create headers\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n  //convert js input to json to send to api\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  axios\r\n    .post(\"/api/auth\", body, config)\r\n    .then((res) =>\r\n      dispatch({\r\n        type: LOGIN_SUCCESS,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) => {\r\n      dispatch(\r\n        returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\")\r\n      );\r\n\r\n      dispatch({\r\n        type: LOGIN_FAIL,\r\n      });\r\n    });\r\n};\r\nexport const logout = () => {\r\n  return {\r\n    type: LOGOUT_SUCCESS,\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  NavLink,\r\n  Alert,\r\n} from \"reactstrap\";\r\n\r\n//container - component hooked to redux\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { register } from \"../../actions/authActions\";\r\nimport { clearErrors } from \"../../actions/errorActions\";\r\n\r\nclass RegisterModal extends Component {\r\n  state = {\r\n    modal: false,\r\n    name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    msg: null,\r\n  };\r\n  static propTypes = {\r\n    isAuthenticated: PropTypes.bool,\r\n    error: PropTypes.object.isRequired,\r\n    register: PropTypes.func.isRequired,\r\n    clearErrors: PropTypes.func.isRequired,\r\n  };\r\n  componentDidUpdate(prevProps) {\r\n    const { error, isAuthenticated } = this.props;\r\n    if (error !== prevProps.error) {\r\n      //check for register err\r\n      if (error.id == \"REGISTER_FAIL\") {\r\n        this.setState({ msg: error.msg.msg });\r\n      } else {\r\n        this.setState({ msg: null });\r\n      }\r\n    }\r\n\r\n    if (this.state.modal) {\r\n      //open modal\r\n      if (isAuthenticated) {\r\n        this.toggle();\r\n      }\r\n    }\r\n  }\r\n  toggle = () => {\r\n    //clear errs\r\n    this.props.clearErrors();\r\n    this.setState({\r\n      modal: !this.state.modal,\r\n    });\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value }); //.name gets name attribute of form input\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name, email, password } = this.state;\r\n    //Create user obj\r\n    const newUser = {\r\n      name,\r\n      email,\r\n      password,\r\n    };\r\n    //attempt to register\r\n    this.props.register(newUser);\r\n    /* //close modal\r\n    this.toggle(); */\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavLink onClick={this.toggle} href=\"#\">\r\n          Register\r\n        </NavLink>\r\n\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Register</ModalHeader>\r\n          <ModalBody>\r\n            {this.state.msg ? (\r\n              <Alert color=\"danger\">{this.state.msg}</Alert>\r\n            ) : null}\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for=\"name\">Name</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"name\"\r\n                  placeholder=\"Name\"\r\n                  className=\"mb-3\"\r\n                  onChange={this.onChange}\r\n                />\r\n\r\n                <Label for=\"email\">Email</Label>\r\n                <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  id=\"email\"\r\n                  placeholder=\"Email\"\r\n                  className=\"mb-3\"\r\n                  onChange={this.onChange}\r\n                />\r\n                <Label for=\"password\">Password</Label>\r\n                <Input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  placeholder=\"Password\"\r\n                  className=\"mb-3\"\r\n                  onChange={this.onChange}\r\n                />\r\n\r\n                <Button color=\"dark\" className=\"mt-2\" block>\r\n                  Register\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  error: state.error, // get from auth reducer\r\n});\r\nexport default connect(mapStateToProps, { register, clearErrors })(\r\n  RegisterModal\r\n);\r\n//need to put all actions in connect to connnect to react\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  NavLink,\r\n  Alert,\r\n} from \"reactstrap\";\r\n\r\n//container - component hooked to redux\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { login } from \"../../actions/authActions\";\r\nimport { clearErrors } from \"../../actions/errorActions\";\r\n\r\nclass LoginModal extends Component {\r\n  state = {\r\n    modal: false,\r\n    email: \"\",\r\n    password: \"\",\r\n    msg: null,\r\n  };\r\n  static propTypes = {\r\n    isAuthenticated: PropTypes.bool,\r\n    error: PropTypes.object.isRequired,\r\n    login: PropTypes.func.isRequired,\r\n    clearErrors: PropTypes.func.isRequired,\r\n  };\r\n  componentDidUpdate(prevProps) {\r\n    const { error, isAuthenticated } = this.props;\r\n    if (error !== prevProps.error) {\r\n      //check for register err\r\n      if (error.id == \"LOGIN_FAIL\") {\r\n        this.setState({ msg: error.msg.msg });\r\n      } else {\r\n        this.setState({ msg: null });\r\n      }\r\n    }\r\n\r\n    if (this.state.modal) {\r\n      //open modal\r\n      if (isAuthenticated) {\r\n        this.toggle();\r\n      }\r\n    }\r\n  }\r\n  toggle = () => {\r\n    //clear errs\r\n    this.props.clearErrors();\r\n    this.setState({\r\n      modal: !this.state.modal,\r\n    });\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value }); //.name gets name attribute of form input\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { email, password } = this.state;\r\n    const user = {\r\n      email,\r\n      password,\r\n    };\r\n    //attempt to login\r\n    this.props.login(user);\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavLink onClick={this.toggle} href=\"#\">\r\n          Login\r\n        </NavLink>\r\n\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Login</ModalHeader>\r\n          <ModalBody>\r\n            {this.state.msg ? (\r\n              <Alert color=\"danger\">{this.state.msg}</Alert>\r\n            ) : null}\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for=\"email\">Email</Label>\r\n                <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  id=\"email\"\r\n                  placeholder=\"Email\"\r\n                  className=\"mb-3\"\r\n                  onChange={this.onChange}\r\n                />\r\n                <Label for=\"password\">Password</Label>\r\n                <Input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  id=\"password\"\r\n                  placeholder=\"Password\"\r\n                  className=\"mb-3\"\r\n                  onChange={this.onChange}\r\n                />\r\n\r\n                <Button color=\"dark\" className=\"mt-2\" block>\r\n                  Login\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  isAuthenticated: state.auth.isAuthenticated,\r\n  error: state.error, // get from auth reducer\r\n});\r\nexport default connect(mapStateToProps, { login, clearErrors })(LoginModal);\r\n//need to put all actions in connect to connnect to react\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { NavLink } from \"reactstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { logout } from \"../../actions/authActions\";\r\n\r\nexport class Logout extends Component {\r\n  static propTypes = {\r\n    logout: PropTypes.func.isRequired,\r\n  };\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <NavLink onClick={this.props.logout} href=\"#\">\r\n          Logout\r\n        </NavLink>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, { logout })(Logout);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavLink,\r\n  Container,\r\n  NavItem,\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport RegisterModal from \"./auth/RegisterModal\";\r\nimport LoginModal from \"./auth/LoginModal\";\r\nimport Logout from \"./auth/Logout\";\r\n\r\nclass AppNavbar extends Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n\r\n  static propTypes = {\r\n    auth: PropTypes.object.isRequired,\r\n  };\r\n\r\n  toggle = () => {\r\n    // using arrow notation automatically binds fxn to this class\r\n    this.setState({ isOpen: !this.state.isOpen });\r\n  };\r\n  render() {\r\n    const { isAuthenticated, user } = this.props.auth;\r\n\r\n    const authLinks = (\r\n      <Fragment>\r\n        <NavItem>\r\n          <span className=\"navbar-text mr-3\">\r\n            <strong>{user ? `Welcome ${user.name}` : null}</strong>\r\n          </span>\r\n        </NavItem>\r\n        <NavItem>\r\n          <Logout />\r\n        </NavItem>\r\n      </Fragment>\r\n    );\r\n    const guestLinks = (\r\n      <Fragment>\r\n        <NavItem>\r\n          <RegisterModal />\r\n        </NavItem>\r\n        <NavItem>\r\n          <LoginModal />\r\n        </NavItem>\r\n      </Fragment>\r\n    );\r\n\r\n    return (\r\n      <div>\r\n        <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n          <Container>\r\n            <NavbarBrand href=\"/\">MoodBoard App</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle}></NavbarToggler>\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n              <Nav className=\"ml-auto\" navbar>\r\n                {isAuthenticated ? authLinks : guestLinks}\r\n              </Nav>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  auth: state.auth,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(AppNavbar);\r\n","//make request to backend\r\n\r\nimport axios from \"axios\";\r\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from \"./types\";\r\nimport { tokenConfig } from \"./authActions\";\r\nimport { returnErrors } from \"./errorActions\";\r\n\r\nexport const getItems = (userID) => (dispatch, getState) => {\r\n  dispatch(setItemsLoading());\r\n  axios\r\n    .get(`/api/items/${userID}`, tokenConfig(getState))\r\n    .then((res) =>\r\n      dispatch({\r\n        type: GET_ITEMS,\r\n        payload: res.data, //data comes from backend\r\n      })\r\n    )\r\n    .catch((err) =>\r\n      dispatch(returnErrors(err.response.data, err.response.status))\r\n    );\r\n};\r\nexport const deleteItem = (id) => (dispatch, getState) => {\r\n  axios\r\n    .delete(`/api/items/${id}`, tokenConfig(getState)) //attach token to header\r\n    .then((res) =>\r\n      dispatch({\r\n        type: DELETE_ITEM,\r\n        payload: id,\r\n      })\r\n    )\r\n    .catch((err) =>\r\n      dispatch(returnErrors(err.response.data, err.response.status))\r\n    );\r\n};\r\n\r\nexport const addItem = (item) => (dispatch, getState) => {\r\n  axios\r\n    .post(\"/api/items\", item, tokenConfig(getState))\r\n    .then((res) =>\r\n      dispatch({\r\n        type: ADD_ITEM,\r\n        payload: res.data,\r\n      })\r\n    )\r\n    .catch((err) =>\r\n      dispatch(returnErrors(err.response.data, err.response.status))\r\n    );\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n  return {\r\n    type: ITEMS_LOADING,\r\n  };\r\n};\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Card,\r\n  CardImg,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  CardColumns,\r\n  Button,\r\n} from \"reactstrap\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { getItems, deleteItem } from \"../actions/itemActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass List extends Component {\r\n  componentDidMount() {\r\n    // this.displayItems();\r\n    this.timer = setInterval(() => this.displayItems(), 1000);\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n    this.timer = null;\r\n  }\r\n  displayItems() {\r\n    if (this.props.auth.isAuthenticated) {\r\n      const id = this.props.auth.user.id || this.props.auth.user._id;\r\n      this.props.getItems(id);\r\n    }\r\n  }\r\n  onDeleteClick = (id) => {\r\n    this.props.deleteItem(id);\r\n  };\r\n  static propTypes = {\r\n    getItems: PropTypes.func.isRequired, //actions from redux are stored as prop\r\n    item: PropTypes.object,\r\n    auth: PropTypes.object.isRequired,\r\n  };\r\n  render() {\r\n    const { items } = this.props.item;\r\n\r\n    return (\r\n      <CardColumns>\r\n        {this.props.auth.isAuthenticated ? (\r\n          <TransitionGroup className=\"list\">\r\n            {items.map(({ _id, name, title, imgURL }) => (\r\n              <CSSTransition key={_id} timeout={100} classNames=\"fade\">\r\n                <Card>\r\n                  {imgURL ? (\r\n                    <CardImg\r\n                      top\r\n                      width=\"100%\"\r\n                      src={imgURL}\r\n                      alt=\"Card image cap\"\r\n                    />\r\n                  ) : null}\r\n\r\n                  <CardBody>\r\n                    <CardTitle className=\"font-weight-bold\">{title}</CardTitle>\r\n                    <CardText>{name}</CardText>\r\n\r\n                    <Button\r\n                      className=\"remove-btn mr-2\"\r\n                      color=\"danger\"\r\n                      size=\"sm\"\r\n                      onClick={this.onDeleteClick.bind(this, _id)}\r\n                    >\r\n                      &times; Delete Item\r\n                    </Button>\r\n                  </CardBody>\r\n                </Card>\r\n              </CSSTransition>\r\n            ))}\r\n          </TransitionGroup>\r\n        ) : null}\r\n      </CardColumns>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  item: state.item,\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(List);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\n//container - component hooked to redux\r\nimport { connect } from \"react-redux\";\r\nimport { addItem } from \"../actions/itemActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ItemModal extends Component {\r\n  state = {\r\n    modal: false,\r\n    title: \"\",\r\n    name: \"\",\r\n    imgURL: \"\",\r\n  };\r\n\r\n  static propTypes = {\r\n    auth: PropTypes.object.isRequired,\r\n  };\r\n  toggle = () => {\r\n    this.setState({\r\n      modal: !this.state.modal,\r\n    });\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value }); //.name gets name attribute of form input\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    console.log(this.props.auth.user._id);\r\n    e.preventDefault();\r\n    const newItem = {\r\n      name: this.state.name,\r\n      title: this.state.title,\r\n      userID: this.props.auth.user._id,\r\n      imgURL: this.state.imgURL,\r\n    };\r\n    //add item with action\r\n    this.props.addItem(newItem);\r\n    //close modal\r\n\r\n    this.toggle();\r\n  };\r\n  render() {\r\n    const { isAuthenticated } = this.props.auth;\r\n    return (\r\n      <div>\r\n        {isAuthenticated ? (\r\n          <Button color=\"dark\" className=\"mb-2\" onClick={this.toggle}>\r\n            Add Item\r\n          </Button>\r\n        ) : (\r\n          <h4 className=\"mb-3 ml-4\">Please login to view and manage items</h4>\r\n        )}\r\n\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Add to List</ModalHeader>\r\n          <ModalBody>\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for=\"title\">Title</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"title\"\r\n                  id=\"title\"\r\n                  placeholder=\"Add title\"\r\n                  onChange={this.onChange}\r\n                />\r\n                <Label for=\"item\">Text</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"item\"\r\n                  placeholder=\"Add Text\"\r\n                  onChange={this.onChange}\r\n                />\r\n                <Label for=\"imgURL\">Image Url</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"imgURL\"\r\n                  id=\"imgURL\"\r\n                  placeholder=\"Add image url\"\r\n                  onChange={this.onChange}\r\n                />\r\n\r\n                <Button color=\"dark\" className=\"mt-2\" block>\r\n                  Add Item\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  //map action to prop\r\n  item: state.item,\r\n  auth: state.auth,\r\n});\r\nexport default connect(mapStateToProps, { addItem })(ItemModal);\r\n","//where state is going to go\r\nimport {\r\n  GET_ITEMS,\r\n  ADD_ITEM,\r\n  DELETE_ITEM,\r\n  ITEMS_LOADING,\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  loading: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        loading: false,\r\n      };\r\n    case DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n        items: state.items.filter((item) => item._id !== action.payload),\r\n      };\r\n\r\n    case ADD_ITEM:\r\n      return {\r\n        ...state,\r\n        items: [action.payload, ...state.items],\r\n      };\r\n    case ITEMS_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { GET_ERRORS, CLEAR_ERRORS } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  msg: {},\r\n  status: null,\r\n  id: null,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ERRORS:\r\n      return {\r\n        msg: action.payload.msg,\r\n        status: action.payload.status,\r\n        id: action.payload.id,\r\n      };\r\n    case CLEAR_ERRORS:\r\n      return {\r\n        msg: {},\r\n        status: null,\r\n        id: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import {\r\n  USER_LOADED,\r\n  USER_LOADING,\r\n  AUTH_ERROR,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  REGISTER_FAIL,\r\n  REGISTER_SUCCESS,\r\n  LOGOUT_SUCCESS,\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  token: localStorage.getItem(\"token\"),\r\n  isAuthenticated: null,\r\n  isLoading: false,\r\n  user: null,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case USER_LOADING:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n    case USER_LOADED:\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n        user: action.payload,\r\n      };\r\n    case LOGIN_SUCCESS:\r\n    case REGISTER_SUCCESS:\r\n      localStorage.setItem(\"token\", action.payload.token);\r\n      return {\r\n        ...state,\r\n        ...action.payload, //send back user and token\r\n        isAuthenticated: true,\r\n        isLoading: false,\r\n      };\r\n\r\n    case AUTH_ERROR:\r\n    case LOGIN_FAIL:\r\n    case LOGOUT_SUCCESS:\r\n    case REGISTER_FAIL:\r\n      localStorage.removeItem(\"token\"); //make sure everything clears out\r\n      return {\r\n        ...state,\r\n        token: null,\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport itemReducer from \"./itemReducer\";\r\nimport errorReducer from \"./errorReducer\";\r\nimport authReducer from \"./authReducer\";\r\n\r\nexport default combineReducers({\r\n  item: itemReducer,\r\n  error: errorReducer,\r\n  auth: authReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\n/* declare global {\r\n    interface Window {\r\n      __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n    }\r\n  } */\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeEnhancers(applyMiddleware(...middleware))\r\n);\r\nexport default store","import React, { Component } from \"react\";\nimport AppNavBar from \"./components/AppNavBar\";\nimport List from \"./components/List\";\nimport ItemModal from \"./components/ItemModal\";\n\nimport { Container } from \"reactstrap\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { loadUser } from \"./actions/authActions\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  componentDidMount() {\n    store.dispatch(loadUser()); //will call load user right when app loads\n  }\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <AppNavBar />\n          <Container>\n            <ItemModal />\n            <List />\n          </Container>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}